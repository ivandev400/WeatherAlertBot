// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherAlertBot.Db;

#nullable disable

namespace WeatherAlertBot.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20240913171221_UserContextMigration")]
    partial class UserContextMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherAlertBot.Models.User", b =>
                {
                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatId"));

                    b.HasKey("ChatId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WeatherAlertBot.Models.UserSettings", b =>
                {
                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("MorningTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("UpdateInterval")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("WeatherAlertBot.Models.UserSettings", b =>
                {
                    b.HasOne("WeatherAlertBot.Models.User", null)
                        .WithOne("UserSettings")
                        .HasForeignKey("WeatherAlertBot.Models.UserSettings", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherAlertBot.Models.User", b =>
                {
                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
